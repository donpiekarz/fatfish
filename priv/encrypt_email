#!/usr/bin/escript


-include_lib("public_key/include/public_key.hrl").



smime_encrypt(PublicKey, Str) ->

    %#person{phone=[0,8,2,3,4,3,1,2], name="Robert"}.
    io:fwrite("aaaaaaaaa~n"),
    Smime = smime:get_smime(),
    {ok, Body} = smime:encode_smime(Smime),
    io:fwrite("bbbbbbbbb: ~p~n", [Body]),
    Body.

encrypt_email(PathToCert, Str)->
    {ok, RawFile} = file:read_file(PathToCert),
    [Cert] =  public_key:pem_decode(RawFile),
    {'Certificate', DerRaw, not_encrypted} = Cert,
    CertRecord = public_key:der_decode('Certificate', DerRaw),
    TBSCertificate = CertRecord#'Certificate'.tbsCertificate,
    PublicKeyInfo = TBSCertificate#'TBSCertificate'.subjectPublicKeyInfo,
    {0, PublicKeyDer} = PublicKeyInfo#'SubjectPublicKeyInfo'.subjectPublicKey,
    PublicKey = public_key:der_decode('RSAPublicKey', PublicKeyDer),
    smime_encrypt(PublicKey, Str).


get_message()->
    From = "<test@fatfish.pepiniera.net>",
    To =  "<koparka.czerwona@gmail.com>",
    Mail = [
            {from, From},
            {to, To},
            {subject, "testing"},
            {body_mime,
             [
              {separator, "000SomexxxRandomString000"},
              {body, "Here's a picture of me\r\n"}
             ]
            }
           ],

    {From, [To], mail:compose_mail(Mail)}.

build_mail({From, ListTo, Message}) ->
    {ok, BinBegin} = file:read_file("priv/templates/fatfish_encrypted_begin.txt"),
    {ok, BinEnd} = file:read_file("priv/templates/fatfish_encrypted_end.txt"),

    Begin = binary_to_list(BinBegin),
    End = binary_to_list(BinEnd),

    {From, ListTo, Begin ++ Message ++ End}.

build_encrypted_mail({_From, [ToRaw], Message}) ->
    {ok, BinMid} = file:read_file("priv/templates/fatfish_mid.txt"),
    Mid = binary_to_list(BinMid),
    From = "From: FatFish MTA <test@fatfish.pepiniera.net>\r\n",
    To = "To: " ++ ToRaw ++ "\r\n",
    io:fwrite("to1~n"),
    %BinMessage = list_to_binary(Message),
    BinMessage = <<"ala ma kotaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1">>,
    PathToCert = "/home/donpiekarz/yavin/dev/certs/koparka.czerwona",
    io:fwrite("bin message: ~p~n", [BinMessage]),
    EncryptedMessage = encrypt_email(PathToCert, BinMessage),
    io:fwrite("to2~n"),
    ArmoredMessage = base64:encode(EncryptedMessage),
    io:fwrite("to3~n"),

    From ++ To ++ Mid ++ ArmoredMessage.



main([]) ->
    true = code:add_pathz(filename:dirname(escript:script_name()) 
			  ++ "/../ebin"),
    true = code:add_pathz(filename:dirname(escript:script_name()) 
			  ++ "/../deps/gen_smtp/ebin"),
    R = application:ensure_all_started(ssl),
    io:fwrite("started ? ~p~n", [R]),

    %io:fwrite("liby: ~p~n", [code:get_path()]),
    %Envelope = get_message(),
    %Options = [
    %           {relay, "gmail.com"},
    %           {tls, always}
    %          ],

    %Res = gen_smtp_client:send_blocking(Envelope, Options),
    %M = build_mail(Envelope),
    %Out = build_encrypted_mail(M),
    %file:write_file("/tmp/fatfish_message.eml", Out),

    
    Body = smime_encrypt("aaa", "bbb"),
    file:write_file("/tmp/fatfish_encoded.bin", Body),

    Res = ok,
    io:fwrite("wyjscie: ~p~n", [Res]).
